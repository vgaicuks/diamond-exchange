#!/usr/bin/env bash
### deploy -- command-line interface to deploy Dpass contract
### Usage: deploy

### Before using deploy, you should copy the keystore file from your keystore to current directory. See:
### geth - https://github.com/ethereum/go-ethereum/wiki/Backup-&-restore
### parity - https://ethereum.stackexchange.com/questions/6471/where-are-my-keys-and-chain-data-located-if-i-am-using-parity

# set -ex
set -ex

## Settings for test networks like Rinkeby, Kovan, Ropsten

## Internal settings (do not touch these unless you know what you are doing!!)
export ETH_RPC_PORT=${ETH_RPC_PORT:-"8545"}
export ETH_RPC_URL=https://rinkeby.infura.io/v3/47706a887c1245319e35b5e507c7f097
export ETH_KEYSTORE="$(pwd)"

export SOLC_FLAGS=${SOLC_FLAGS:-"--optimize"}
# export ETH_GAS=${ETH_GAS:-"8000000"}
# https://ethstats.net/ 9965875
# https://www.rinkeby.io/#stats 7006834
export ETH_GAS=7000034
# 1000000000 wei = 1 gwei
export ETH_GAS_PRICE=${ETH_GAS_PRICE:-"10000000000"}

# export ETH_FROM=$(seth rpc eth_coinbase)
export ETH_FROM=0x9556E25F9b4D343ee38348b6Db8691d10fD08A61
export ETH_PASSWORD=~/.eth-pwd

dapp build --extract

hevm flatten --source-file src/DiamondExchange.sol --json-file out/dapp.sol.json > out/DiamondExchange-flatt.sol
hevm flatten --source-file src/DiamondExchange.t.sol --json-file out/dapp.sol.json > out/DiamondExchange.t-flatt.sol
hevm flatten --source-file src/Liquidity.sol --json-file out/dapp.sol.json > out/Liquidity-flatt.sol
hevm flatten --source-file src/Wallet.sol --json-file out/dapp.sol.json > out/Wallet-flatt.sol
hevm flatten --source-file src/Burner.sol --json-file out/dapp.sol.json > out/Burner-flatt.sol
hevm flatten --source-file src/SimpleAssetManagement.sol --json-file out/dapp.sol.json > out/SimpleAssetManagement-flatt.sol

# # ETH feed
# export RATE=120
# export FEED_VALID=true
# ETH_PRICE_FEED=$(dapp create TestFeedLike $(seth --to-uint256 $(seth --to-wei $RATE eth)) $FEED_VALID)
# echo -e "ETH Price Fedd DEPLOYED AT: $ETH_PRICE_FEED"

# # DPT feed
# export RATE=12
# DPT_PRICE_FEED=$(dapp create TestFeedLike $(seth --to-uint256 $(seth --to-wei $RATE eth)) $FEED_VALID)
# echo -e "DPT Price Fedd DEPLOYED AT: $DPT_PRICE_FEED"

# # CDC feed
# export RATE=70
# CDC_PRICE_FEED=$(dapp create TestFeedLike $(seth --to-uint256 $(seth --to-wei $RATE eth)) $FEED_VALID)
# echo -e "CDC Price Fedd DEPLOYED AT: $CDC_PRICE_FEED"

# LIQ=$(dapp create Liquidity)
# echo -e "Liquiditiy DEPLOYED AT: $LIQ"

# export SUPPLY=10000000000000000000000000000
# CDC=$(dapp create DSToken $(seth --to-bytes32 $(seth --from-ascii CDC)))
# echo -e "CDC DEPLOYED AT: $CDC"
# seth send $CDC "mint(uint)" $(seth --to-uint256 $SUPPLY)

# DPT=$(dapp create DSToken $(seth --to-bytes32 $(seth --from-ascii DPT)))
# echo -e "DPT DEPLOYED AT: $DPT"
# seth send $DPT "mint(uint)" $(seth --to-uint256 $SUPPLY)

# DPASS=$(dapp create Dpass)
# echo -e "DPASS DEPLOYED AT: $DPASS"

# WALLET=$(dapp create Wallet)
# echo -e "Wallet DEPLOYED AT: $WALLET"

# ASM=$(dapp create TrustedASMTester)
# echo -e "ASM DEPLOYED AT: $ASM"

# # export DPT=0xb30041ff94fc8fc071029f0abc925a60b5a2059a
# BURNER=$(dapp create Burner "$DPT")
# echo -e "Burner DEPLOYED AT: $BURNER"

export DPT=0xb30041ff94fc8fc071029f0abc925a60b5a2059a
export CDC=0x3fc234658ac12c8e823f0a2f6aa2eb1812ca440f
export DPASS=0x2283bf620ee7fdafa009b5f6607dd217eccf6fe4
export ETH_PRICE_FEED=0x2Ed2b811A048683E7f2CE00587f73CcfdB86D219
export DPT_PRICE_FEED=0xc9faD47Fe77500515de29024C076b6d8D87d423E
export CDC_PRICE_FEED=0x1D2A08e056059a066D98B516BDEab01DFbD0D45F
export LIQ=0x20835e2c6025cdceca3daa11bb169b38726b9c4a
export BURNER=0xd98860b7eef76be5c3f2a8d8845a1e9f0f9fad36
export ASM=0x0F7F9A6971B28c9a70f9607A5134D9452E30e064
export WALLET=0xA787E6c6d365641DC9540148E4f8426f81FE235B
export FIXED_FEE=$(seth --to-uint256 $(seth --to-wei 0 eth))
export VAR_FEE=$(seth --to-uint256 $(seth --to-wei 1 eth))
export PROFIT_RATE=$(seth --to-uint256 $(seth --to-wei 0.1 eth))

seth send $DPT "transfer(address,uint)" $LIQ $(seth --to-uint256 $(seth --to-wei 1000 eth))

DIAMOND_EXCHANGE=$(dapp create DiamondExchange $CDC $DPT $DPASS $ETH_PRICE_FEED $DPT_PRICE_FEED $CDC_PRICE_FEED $LIQ $BURNER $ASM $FIXED_FEE $VAR_FEE $PROFIT_RATE $WALLET)

# # CDC=$(dapp create Cdc)
# CDC=0x42aC13dA77bc7204b61C8a44Acba4411Fc34bbbf
# # export CDC=$CDC
# # echo -e "Cdc DEPLOYED AT: $CDC"
# # test -z $CDC && exit 1

# DPT=0xb30041fF94fc8Fc071029F0ABc925A60B5a2059A
# # export DPT=$DPT
# # echo -e "DPT DEPLOYED AT: $DPT"
# # test -z $DPT && exit 1

# BURNER=$(dapp create Burner "$DPT")
# export BURNER=$BURNER
# echo -e "Burner DEPLOYED AT: $BURNER"
# test -z $BURNER && exit 1


# DPT_FEED=0x97e4b0634971c2b286eab779bb672cf69fe525d2
# export DPT_FEED=$DPT_FEED
# echo -e "DPT Medianizer DEPLOYED AT: $DPT_FEED"

# ETH_FEED=$(dapp create TestMedianizerLike $(seth --to-uint256 $(seth --to-wei 250 eth)) true)
# export ETH_FEED=$ETH_FEED
# echo -e "ETH MedianizerLike DEPLOYED AT: $ETH_FEED"
# test -z $ETH_FEED && exit 1

# CDC_FEED=$(dapp create TestMedianizerLike $(seth --to-uint256 $(seth --to-wei 30 eth)) true)
# export CDC_FEED=$CDC_FEED
# echo -e "CDC MedianizerLike DEPLOYED AT: $CDC_FEED"
# test -z $CDC_FEED && exit 1

# CdcExchange=$(dapp create CdcExchange "$CDC" "$DPT" "$CDC_FEED" "$DPT_FEED" "$ETH_FEED" "$ETH_FROM" "$BURNER" $(seth --to-uint256 $(seth --to-wei 12 eth)) $(seth --to-uint256 $(seth --to-wei 30 eth)) $(seth --to-uint256 $(seth --to-wei 230 eth)))
# export CdcExchange=$CdcExchange
# echo -e "CdcExchange DEPLOYED AT: $CdcExchange"

# CdcAuthority=$(dapp create CdcAuthority)
# export CdcAuthority=$CdcAuthority
# echo -e "CdcAuthority DEPLOYED AT: $CdcAuthority"

# seth send $CdcExchange "setAuthority(address)" $CdcAuthority

# # enable CdcExchange to manage Cdc tokens
# seth send $CDC "approve(address,uint)" $CdcExchange ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

# # enable CdcExchange to manage DPT tokens (for fee)
# seth send $DPT "approve(address,uint)" $CdcExchange ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff

# # seth send 0x9537040cd32ed8abd5f04fbb7b83f619626a5079 "mintDiamondTo(address, string memory, uint, string memory)" 0x9556E25F9b4D343ee38348b6Db8691d10fD08A61 "7296159263" 00000000000000000000000000000000000000000000000009da6d3cfe870000 ""
# # seth call 0x9537040cd32ed8abd5f04fbb7b83f619626a5079 "diamondCaratByIndex(uint)" 0
# # seth --from-wei $(seth --to-dec $(seth call 0x9537040cd32ed8abd5f04fbb7b83f619626a5079 "diamondCaratByIndex(uint)" 0))

# # Get data from price feed
# # seth call 0x97e4b0634971c2b286eab779bb672cf69fe525d2 "peek()(bytes32, bool)"
# # seth --to-fix 18 $(seth --to-dec RESPONSE)